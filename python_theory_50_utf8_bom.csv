language,section,topic,content
Python,Введение,Что такое Python,"Python — это высокоуровневый, интерпретируемый язык программирования с простым и читаемым синтаксисом. Он подходит для веб-разработки, анализа данных, автоматизации, машинного обучения и многого другого."
Python,Введение,История Python,Язык Python был создан Гвидо ван Россумом и впервые выпущен в 1991 году. Название произошло от шоу 'Monty Python’s Flying Circus'.
Python,Введение,Установка Python,Вы можете скачать последнюю версию Python с официального сайта python.org. Установка проста и включает встроенный интерпретатор и менеджер пакетов pip.
Python,Введение,Первая программа,"Самая простая программа на Python — это вывод текста: print('Hello, World!'). Это демонстрирует базовый синтаксис."
Python,Синтаксис,Отступы,Python использует отступы (обычно 4 пробела) для определения блоков кода. Это делает код более читаемым.
Python,Синтаксис,Комментарии,Комментарии начинаются с символа # и используются для пояснений. Многострочные комментарии оформляются с помощью тройных кавычек.
Python,Переменные,Создание переменных,Переменная создаётся при первом присваивании: x = 5. Тип переменной определяется автоматически.
Python,Переменные,Типы данных,"Основные типы данных в Python: int, float, str, bool, list, tuple, dict, set."
Python,Переменные,Преобразование типов,"Используйте функции int(), str(), float() и т. д. для преобразования типов."
Python,Операторы,Арифметические операторы,"Python поддерживает +, -, *, /, //, %, **. Например: 5 + 3 = 8."
Python,Операторы,Операторы сравнения,"==, !=, >, <, >=, <= позволяют сравнивать значения. Возвращают True или False."
Python,Операторы,Логические операторы,"Логические операторы: and, or, not. Пример: if x > 0 and y > 0."
Python,Условные конструкции,if,if — базовый условный оператор. Пример: if x > 0: print('Положительное').
Python,Условные конструкции,if-else,if-else позволяет задать альтернативное поведение. Пример: if x > 0: ... else: ...
Python,Условные конструкции,elif,elif используется для проверки дополнительных условий.
Python,Циклы,for,for используется для перебора итерируемых объектов. Пример: for i in range(5): print(i).
Python,Циклы,while,"while выполняет блок кода, пока условие истинно."
Python,Циклы,break и continue,"break завершает цикл, continue пропускает текущую итерацию."
Python,Функции,Создание функций,Функции создаются с помощью ключевого слова def. Пример: def greet(): print('Hi').
Python,Функции,Аргументы и параметры,"Функции могут принимать аргументы. Пример: def add(x, y): return x + y."
Python,Функции,Возврат значения,Оператор return используется для возврата значения из функции.
Python,Строки,Создание строк,"Строки заключаются в одинарные или двойные кавычки: 'text', ""text""."
Python,Строки,Операции со строками,+ объединяет строки. len() возвращает длину. 'in' проверяет вхождение.
Python,Строки,Методы строк,"Строки имеют множество методов: lower(), upper(), replace(), split(), strip()."
Python,Списки,Создание списков,"Списки — изменяемые коллекции. Пример: my_list = [1, 2, 3]."
Python,Списки,Индексация и срезы,"Списки поддерживают индексацию и срезы: my_list[1], my_list[1:3]."
Python,Списки,Методы списков,"append(), remove(), pop(), sort(), reverse() и др."
Python,Словари,Создание словарей,Словари хранят пары ключ-значение. Пример: my_dict = {'name': 'Alice'}.
Python,Словари,Доступ к значениям,Вы можете получить значение по ключу: my_dict['name'].
Python,Словари,Методы словарей,"Методы: keys(), values(), items(), get(), update(), pop()."
Python,Исключения,Обработка исключений,"Исключения позволяют обрабатывать ошибки, возникающие во время выполнения. Используйте try, except, finally."
Python,Исключения,raise,Оператор raise используется для явного возбуждения исключения. Пример: raise ValueError('Некорректное значение').
Python,Файлы,Открытие и чтение файлов,"Открытие файла: f = open('file.txt'). Чтение: f.read(), f.readline(), f.readlines()."
Python,Файлы,Запись в файл,Используйте метод write() для записи данных в файл. Не забудьте закрыть файл через f.close() или использовать with.
Python,Файлы,Менеджер контекста with,С with open(...) as f: автоматически закрывает файл. Пример: with open('file.txt') as f: data = f.read().
Python,Модули,Импорт модулей,Модули позволяют структурировать код. Пример: import math. Можно импортировать конкретные функции: from math import sqrt.
Python,Модули,__name__ и __main__,Проверка __name__ == '__main__' позволяет запускать код только при прямом вызове файла.
Python,Модули,Создание собственных модулей,Файл с функциями и кодом можно подключать в другой файл с помощью import имя_файла.
Python,ООП,Классы и объекты,Класс — это шаблон для создания объектов. Пример: class Person: ... person = Person().
Python,ООП,Методы,"Методы — это функции, определённые внутри класса. Первый аргумент метода — self."
Python,ООП,Конструктор __init__,"__init__ — специальный метод, вызываемый при создании объекта. Используется для инициализации."
Python,ООП,Наследование,Классы могут наследовать поведение других классов. Пример: class Student(Person): ...
Python,ООП,Полиморфизм,Полиморфизм — способность использовать один и тот же интерфейс для разных типов объектов.
Python,ООП,Инкапсуляция,Инкапсуляция ограничивает доступ к внутренним данным класса. Используйте _protected и __private переменные.
Python,Lambda,Анонимные функции,lambda позволяет создавать небольшие функции без имени. Пример: square = lambda x: x**2.
Python,Lambda,Использование с map,"map применяет функцию к каждому элементу. Пример: map(lambda x: x+1, [1,2,3])."
Python,Lambda,Использование с filter,"filter отбирает элементы по условию. Пример: filter(lambda x: x>0, [-1, 0, 2])."
Python,Встроенные функции,"len, type, range","len() — длина, type() — тип, range() — генератор чисел. Часто используются в циклах."
Python,Встроенные функции,"enumerate, zip",enumerate возвращает индекс + значение. zip объединяет несколько итерируемых объектов.
Python,Генераторы,List comprehension,[x for x in iterable if условие] — краткая запись для создания списков.
Python,Генераторы,Генераторы через yield,Функции с yield возвращают генераторы. Используются для экономии памяти.
Python,Генераторы,next и iter,"iter(obj) создаёт итератор, next(it) возвращает следующий элемент."
Python,Коллекции,Множества (set),"set — неупорядоченная коллекция уникальных элементов. Поддерживает операции: union, intersection."
Python,Коллекции,Кортежи (tuple),Кортеж — неизменяемая коллекция. tuple можно использовать как ключи словаря.
Python,Коллекции,Словари (dict),dict — коллекция пар ключ-значение. Ключи должны быть уникальны.
Python,JSON,Импорт и экспорт,"Используйте модуль json: json.dumps(), json.loads(). Для работы с файлами — json.dump()/json.load()."
